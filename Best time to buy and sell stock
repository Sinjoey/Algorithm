// memoised 


int solve(int i,int bag,vector<int>& prices,vector<vector<int>>& dp) {
        if(i==prices.size())
            return 0;
        if(dp[i][bag]!=-1)
            return dp[i][bag];
        int buy=INT_MIN,sell=INT_MIN;
        if(bag==1)
            sell=max(prices[i]+solve(i+1,0,prices,dp),0+solve(i+1,1,prices,dp));
        else
            buy=max(-1*prices[i]+solve(i+1,1,prices,dp),0+solve(i+1,0,prices,dp));
        return dp[i][bag]=max(buy,sell);
    }
    
    
    
    
 // bottom up
 
 
 int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size()+1,vector<int>(2,-1));
        for(int j=0;j<2;j++)
            dp[prices.size()][j]=0;
        for(int i=prices.size()-1;i>=0;i--) {
            for(int bag=0;bag<2;bag++) {
                int buy=INT_MIN,sell=INT_MIN;
                if(bag==1)
                    sell=max(prices[i]+dp[i+1][0],0+dp[i+1][1]);
                else
                    buy=max(-1*prices[i]+dp[i+1][1],0+dp[i+1][0]);
                dp[i][bag]=max(buy,sell);
            }
        }
        return dp[0][0];
        
        
        
 //  bottom up optimised
 
 
 int maxProfit(vector<int>& prices) {
        vector<int> prev(2,0),curr(2,0);
        for(int i=prices.size()-1;i>=0;i--) {
            for(int bag=0;bag<2;bag++) {
                int buy=INT_MIN,sell=INT_MIN;
                if(bag==1)
                    sell=max(prices[i]+prev[0],0+prev[1]);
                else
                    buy=max(-1*prices[i]+prev[1],0+prev[0]);
                curr[bag]=max(buy,sell);
            }
            prev=curr;
        }
        return prev[0];
    }
