// BFS method 
//adjacent different colour = Bipartite Graph

bool isBipartite(vector<vector<int>>& graph) {
        vector<int> adj[graph.size()];
        for(int i=0;i<graph.size();i++) {
            for(int j=0;j<graph[i].size();j++) {
                adj[i].push_back(graph[i][j]);
            }
        }
        vector<int> vis (graph.size(),0);
        vector<int> check (graph.size(),-1);
        for(int i=0;i<vis.size();i++) {
            if(vis[i]==0) {
                queue<int> q;
                q.push(i);
                vis[i]=1;
                check[i]=1;
                while(!q.empty()) {
                    int node=q.front();
                    q.pop();
                    for(auto it:adj[node]) {
                        if(!vis[it]) {
                            vis[it]=1;
                            check[it]=!check[node];
                            q.push(it);
                        }
                        else if(vis[it]==1 && check[it]==check[node]) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
    
    
    
    //dfs method
    
    
    
    bool dfs(int node,vector<int> adj[],vector<int>& vis,vector<int>& check) {
        vis[node]=1;
        for(auto it:adj[node]) {
            if(!vis[it]) {
                check[it]=!check[node];
                if(!dfs(it,adj,vis,check)) {
                    return false;
                }
            }
            else if(vis[it]==1 && check[it]==check[node]) {
                return false;
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
         vector<int> adj[graph.size()];
        for(int i=0;i<graph.size();i++) {
            for(int j=0;j<graph[i].size();j++) {
                adj[i].push_back(graph[i][j]);
            }
        }
        vector<int> vis (graph.size(),0);
        vector<int> check (graph.size(),-1);
        for(int i=0;i<graph.size();i++) {
            if(vis[i]==0) {
                check[i]=1;
                if(!dfs(i,adj,vis,check))
                    return false;
            }
        }
        return true;
    }
