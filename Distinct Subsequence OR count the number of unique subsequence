// memoised

int solve(int i,int j,string s,string t,vector<vector<int>>& dp) {
        if(j<0)
            return 1;
        if(i<0)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(s[i]==t[j])
            return dp[i][j]=solve(i-1,j-1,s,t,dp)+solve(i-1,j,s,t,dp);
        else 
            return dp[i][j]=solve(i-1,j,s,t,dp);
        return 0;
    }
    
    
    
    //bottom_Up
    
    int numDistinct(string s, string t) {
        vector<vector<double>> dp (s.length()+1, vector<double> (t.length()+1,-1));
        for(int i=0;i<=t.length();i++) dp[0][i]=0;
        for(int i=0;i<=s.length();i++) dp[i][0]=1;
        for(int i=1;i<=s.length();i++) {
            for(int j=1;j<=t.length();j++) {
                if(s[i-1]==t[j-1])
                    dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
                else 
                    dp[i][j]=dp[i-1][j];
            }
        }
        return (int)dp[s.length()][t.length()];
    }
    
    
    
    //bottom_Up_1D_Array_optimized
    
    int numDistinct(string s, string t) {
        vector<double> prev (t.length()+1,0);
        prev[0]=1;
        for(int i=1;i<=s.length();i++) {
            for(int j=t.length();j>0;j--) {
                if(s[i-1]==t[j-1])
                    prev[j]=prev[j-1]+prev[j];
                else 
                    prev[j]=prev[j];
            }
        }
        return (int)prev[t.length()];
    }
    
    
