// Important dp on grid problem


//memoized

int mod=1e9+7;
    int solve(int i,int j,vector<vector<int>>& grid,vector<vector<int>>& dp,int parent) {
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]<=parent)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        int down=solve(i+1,j,grid,dp,grid[i][j]);
        int up=solve(i-1,j,grid,dp,grid[i][j]);
        int left=solve(i,j-1,grid,dp,grid[i][j]);
        int right=solve(i,j+1,grid,dp,grid[i][j]);
        return dp[i][j]=(up+down+left+right+1)%mod;
    }
    int countPaths(vector<vector<int>>& grid) {
        int sum=0;
        vector<vector<int>> dp (grid.size(),vector<int>(grid[0].size(),-1));
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[0].size();j++) {
                if(dp[i][j]==-1)
                    solve(i,j,grid,dp,-1);
            }
        }
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[0].size();j++) {
                sum=(sum+dp[i][j])%mod;
            }
        }
        return sum;
    }
