//No priority queue will be used since step taken will be 1 at a time. Basically its the same
//as bfs or spider form of traversal which always gives shortest path value because steps increase
//one by one (+1 at a time).

// 8 direction move available.


int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        vector<vector<int>> vis (grid.size(),vector<int> (grid.size(),0));
        if(grid[0][0]!=0 || grid[grid.size()-1][grid.size()-1]!=0)
            return -1;
        queue<pair<int,pair<int,int>>> q;
        q.push({1,{0,0}});
        vector<int> rows {-1,0,1,-1,1,0,1,-1},cols {-1,-1,-1,0,0,1,1,1};
        while(!q.empty()) {
            int dis=q.front().first;
            int x=q.front().second.first;
            int y=q.front().second.second;
            if(x==grid.size()-1 && y==grid.size()-1)
                return dis;
            q.pop();
            for(int i=0;i<rows.size();i++) {
                int row=x+rows[i];
                int col=y+cols[i];
                if(row>=0 && row<grid.size() && col>=0 && col<grid.size()) {
                    if(vis[row][col]==0 && grid[row][col]==0) {
                        vis[row][col]=1;
                        q.push({dis+1,{row,col}});
                    }
                }
            }
        }
        return -1;
    }
