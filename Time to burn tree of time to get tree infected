// use bfs first to store the parent of every node which is nothing just rotating the edge opposite
// then simple queue pair bfs like graph.



int amountOfTime(TreeNode* root, int start) {
        queue<TreeNode*> q;
        map<TreeNode*,TreeNode*> mp;
        TreeNode* target;
        q.push(root);
        mp[root]=NULL;
        while(!q.empty()) {
            auto node=q.front();
            q.pop();
            if(node->val==start)
                target=node;
            if(node->left!=NULL) {
                mp[node->left]=node;
                q.push(node->left);
            }
            if(node->right!=NULL) {
                mp[node->right]=node;
                q.push(node->right);
            }
        }
        map<TreeNode*,int> vis;
        int mx=INT_MIN;
        queue<pair<TreeNode*,int>> pq;
        pq.push({target,0});
        vis[target]=1;
        while(!pq.empty()) {
            auto node=pq.front().first;
            auto dis=pq.front().second;
            cout<<node->val<<"-"<<dis<<" ";
            pq.pop();
            mx=max(mx,dis);
            if(mp[node]!=NULL) {
                if(vis[mp[node]]==0) {
                    vis[mp[node]]=1;
                    pq.push({mp[node],dis+1});
                }
            }
            if(node->left!=NULL) {
                if(vis[node->left]==0) {
                    vis[node->left]=1;
                    pq.push({node->left,dis+1});
                }
            }
            if(node->right!=NULL) {
                if(vis[node->right]==0) {
                    vis[node->right]=1;
                    pq.push({node->right,dis+1});
                }
            }
        }
        return mx;
    }
