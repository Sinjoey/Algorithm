//memoised


    int solve(int i,int j,string word1,string word2,vector<vector<int>>& dp) {
        if(i<0)
            return j+1;
        else if(j<0)
            return i+1;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(word1[i]==word2[j])
            return dp[i][j]=0+solve(i-1,j-1,word1,word2,dp);
        return dp[i][j]=min({1+solve(i,j-1,word1,word2,dp),1+solve(i-1,j,word1,word2,dp),1+solve(i-1,j-1,word1,word2,dp)});
    }
    
    
    
    
    //bottom_Up
    
    
    int minDistance(string word1, string word2) {
        vector<vector<int>> dp(word1.length()+1,vector<int>(word2.length()+1,0));
        for(int i=0;i<=word2.length();i++)
            dp[0][i]=i;
        for(int i=0;i<=word1.length();i++)
            dp[i][0]=i;
        for(int i=1;i<=word1.length();i++) {
            for(int j=1;j<=word2.length();j++) {
                if(word1[i-1]==word2[j-1])
                    dp[i][j]=0+dp[i-1][j-1];
                else
                    dp[i][j]=min({1+dp[i][j-1],1+dp[i-1][j],1+dp[i-1][j-1]});
            }
        }
        return dp[word1.length()][word2.length()];
    }
    
    
    
    
    
    //bottom_UP_Optimised
    
    
    int minDistance(string word1, string word2) {
        vector<int> prev(word2.length()+1,0),curr(word2.length()+1,0);
        for(int i=0;i<=word2.length();i++)
            prev[i]=i;
        for(int i=1;i<=word1.length();i++) {
            curr[0]=i;
            for(int j=1;j<=word2.length();j++) {
                if(word1[i-1]==word2[j-1])
                    curr[j]=0+prev[j-1];
                else
                    curr[j]=min({1+curr[j-1],1+prev[j],1+prev[j-1]});
            }
            prev=curr;
        }
        return prev[word2.length()];
    }
