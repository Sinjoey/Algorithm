// bfs method Graph algorithm

int orangesRotting(vector<vector<int>>& grid) {
        vector<vector<int>> testbed=grid;
        int m=grid.size();
        int n=grid[0].size();
        int mx=-1;
        int count=0;
        queue<pair<pair<int,int>,int>> q;
        vector<vector<int>> check(m, vector<int> (n,0));
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(testbed[i][j]==2) {
                    q.push({{i,j},0});
                    check[i][j]=1;
                    count++;
                }
            }
        }
        while(!q.empty()) {
            auto i=q.front().first.first;
            auto j=q.front().first.second;
            auto t=q.front().second;
            mx=max(t,mx);
            q.pop();
            if(i-1>=0 && check[i-1][j]==0 && testbed[i-1][j]==1) {
                testbed[i-1][j]=2;
                check[i-1][j]=1;
                q.push({{i-1,j},t+1});
            }
            if(i+1<m && check[i+1][j]==0 && testbed[i+1][j]==1) {
                testbed[i+1][j]=2;
                check[i+1][j]=1;
                q.push({{i+1,j},t+1});
            }
            if(j-1>=0 && check[i][j-1]==0 && testbed[i][j-1]==1) {
                testbed[i][j-1]=2;
                check[i][j-1]=1;
                q.push({{i,j-1},t+1});
            }
            if(j+1<n && check[i][j+1]==0 && testbed[i][j+1]==1) {
                testbed[i][j+1]=2;
                check[i][j+1]=1;
                q.push({{i,j+1},t+1});
            }
        }
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++)
                if(testbed[i][j]==1)
                    return -1;
        }
        if(count==0)
            return 0;
        return mx;
    }
